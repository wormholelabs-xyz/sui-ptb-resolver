name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  lint-commits:
    name: Lint Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commits
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: ./config/commitlint.config.mjs
          helpURL: https://www.conventionalcommits.org/
          token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Check formatting
        run: pnpm format:check

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  release-preview:
    name: Release Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install release tools
        run: |
          # Install the tools we need for version calculation and changelog generation
          pnpm add -D conventional-recommended-bump conventional-changelog-cli conventional-changelog-angular

      - name: Analyze commits
        id: analyze
        run: |
          # Get the recommended bump based on commits since main
          BUMP=$(npx conventional-recommended-bump -p angular)
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

          # Get all relevant tag information in one pass
          ALL_TAGS=$(git tag -l | sort -V)
          LATEST_STABLE_TAG=$(echo "$ALL_TAGS" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | tail -1)

          if [[ -n "$LATEST_STABLE_TAG" ]]; then
            # Extract version number from tag (remove 'v' prefix if present)
            CURRENT_VERSION=$(echo $LATEST_STABLE_TAG | sed 's/^v//')
            echo "Found latest stable tag: $LATEST_STABLE_TAG, using version: $CURRENT_VERSION"
          else
            # No stable tags found, use package.json version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "No stable tags found, using package.json version: $CURRENT_VERSION"
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Calculate next version
          if [[ "$BUMP" == "major" ]]; then
            NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
          elif [[ "$BUMP" == "minor" ]]; then  
            NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
          elif [[ "$BUMP" == "patch" ]]; then
            NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
          else
            NEXT_VERSION=""
          fi

          # Add prerelease suffix for development builds
          if [[ -n "$NEXT_VERSION" ]]; then
            # Find existing development tags for this version from our cached tag list
            EXISTING_DEV_TAGS=$(echo "$ALL_TAGS" | grep "^v\?${NEXT_VERSION}-development\." || true)
            
            if [[ -n "$EXISTING_DEV_TAGS" ]]; then
              # Get the highest development number
              HIGHEST_DEV=$(echo "$EXISTING_DEV_TAGS" | tail -1 | sed 's/.*development\.\([0-9]\+\).*/\1/' || echo "0")
              NEXT_DEV_NUM=$((HIGHEST_DEV + 1))
            else
              NEXT_DEV_NUM=1
            fi
            
            NEXT_VERSION="$NEXT_VERSION-development.$NEXT_DEV_NUM"
          fi

          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Generate release notes for unreleased changes only (since last tag)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LATEST_TAG" ]]; then
            echo "Generating changelog since tag: $LATEST_TAG"
            # Generate changelog since the last tag
            npx conventional-changelog -p angular --commit-path . --tag-prefix "v" --pkg '{"version":"'$LATEST_TAG'"}' | tail -n +2 > CHANGELOG_PREVIEW.md || echo "No changes" > CHANGELOG_PREVIEW.md
          else
            echo "No tags found, generating full changelog"
            npx conventional-changelog -p angular -r 0 -u | tail -n +2 > CHANGELOG_PREVIEW.md || echo "No changes" > CHANGELOG_PREVIEW.md
          fi

          # If the file is empty or just has headers, generate from git log since last tag
          if [ ! -s CHANGELOG_PREVIEW.md ] || [ "$(wc -l < CHANGELOG_PREVIEW.md)" -lt 3 ]; then
            echo "### Recent Changes" > CHANGELOG_PREVIEW.md
            echo "" >> CHANGELOG_PREVIEW.md
            if [[ -n "$LATEST_TAG" ]]; then
              git log ${LATEST_TAG}..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG_PREVIEW.md
            else
              git log origin/main..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG_PREVIEW.md
            fi
          fi

      - name: Generate Release Preview
        id: release-preview
        run: |
          echo "## 📦 Release Preview" > release-preview.md
          echo "" >> release-preview.md

          if [[ -n "${{ steps.analyze.outputs.next_version }}" ]]; then
            echo "🚀 **Version that would be released:** \`${{ steps.analyze.outputs.next_version }}\`" >> release-preview.md
            echo "" >> release-preview.md
            echo "📊 **Bump type:** ${{ steps.analyze.outputs.bump }}" >> release-preview.md
            echo "" >> release-preview.md
            echo "### 📝 Changes" >> release-preview.md
            echo "" >> release-preview.md
            cat CHANGELOG_PREVIEW.md >> release-preview.md
          else
            echo "🔍 **No release would be created**" >> release-preview.md
            echo "" >> release-preview.md
            echo "No significant changes detected that would trigger a release." >> release-preview.md
          fi

          echo "" >> release-preview.md
          echo "---" >> release-preview.md
          echo "*This preview is automatically updated on each commit. The actual release will happen when this PR is merged to main.*" >> release-preview.md

          # Set output for comment
          {
            echo 'preview<<EOF'
            cat release-preview.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "📦 Release Preview"

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.release-preview.outputs.preview }}
          edit-mode: replace
