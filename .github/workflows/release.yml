name: Release

on:
  push:
    branches: [main, release]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Validate workflow trigger
        run: |
          echo "üîí Security Check: Validating workflow trigger"
          ALLOWED_EVENTS="push workflow_dispatch"
          if [[ ! "$ALLOWED_EVENTS" =~ "${{ github.event_name }}" ]]; then
            echo "‚ùå Unauthorized workflow trigger: ${{ github.event_name }}"
            exit 1
          fi

      - name: Validate branch
        run: |
          # For push events, only allow main and release branches
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" != "refs/heads/main" ]] && [[ "${{ github.ref }}" != "refs/heads/release" ]]; then
              echo "‚ùå Push events only allowed from main or release branches"
              exit 1
            fi
          fi

          # For workflow_dispatch, only allow release and hotfix/* branches
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.ref }}" != "refs/heads/release" ]] && [[ ! "${{ github.ref }}" =~ ^refs/heads/hotfix/.+ ]]; then
              echo "‚ùå Manual dispatch only allowed from release or hotfix/* branches"
              exit 1
            fi
          fi

          echo "‚úÖ Branch validation passed for: ${{ github.ref }}"

      - name: Create audit log
        run: |
          mkdir -p audit-logs

          # Determine release type
          RELEASE_TYPE="unknown"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            RELEASE_TYPE="prerelease"
          elif [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            RELEASE_TYPE="production"
          elif [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/.+ ]]; then
            RELEASE_TYPE="hotfix"
          fi

          cat > audit-logs/release-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "branch": "${{ github.ref }}",
            "commit": "${{ github.sha }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "release_type": "${RELEASE_TYPE}"
          }
          EOF

      - name: Upload audit log
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_id }}
          path: audit-logs/
          retention-days: 90

  publish:
    needs: security-check
    name: Publish Release
    runs-on: ubuntu-latest
    # Only require environment approval for production release and hotfix branches
    environment: ${{ github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/hotfix/') && 'production' || '' }}
    outputs:
      release_created: ${{ steps.release.outputs.new_release_published }}
      tag_name: ${{ steps.release.outputs.new_release_git_tag }}
      version: ${{ steps.release.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # pinning the commit to v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build package
        run: bun run build

      - name: Audit signatures
        run: npm audit signatures

      - name: Pre-publish Security Audit
        run: |
          # Determine release type for audit log
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "üìù Pre-release Security Audit"
            echo "============================="
            RELEASE_TYPE="Pre-release (Development)"
          elif [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            echo "üìù Production Release Security Audit"
            echo "===================================="
            RELEASE_TYPE="Production Release"
          elif [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/.+ ]]; then
            echo "üî• Hotfix Release Security Audit"
            echo "================================"
            RELEASE_TYPE="Hotfix"
          fi

          echo "Release Type: ${RELEASE_TYPE}"
          echo "Released by: ${{ github.actor }}"
          echo "Release Time: $(date -u)"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo ""
          echo "‚ö†Ô∏è  Publishing to npm registry will begin after this audit"

      - name: Setup hotfix prerelease config
        if: startsWith(github.ref, 'refs/heads/hotfix/')
        run: |
          echo "üìù Setting up prerelease configuration for hotfix branch"
          cp .github/configs/releaserc.prerelease.json .releaserc.json
          echo "‚úÖ Prerelease config applied for hotfix branch"

      - name: Create Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          # Determine release type for logging
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "üì¶ Creating prerelease (development)"
          elif [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            echo "üîí Creating production release after approvals"
          elif [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/.+ ]]; then
            echo "üî• Creating hotfix release after approvals"
          fi

          echo "üì¶ Running semantic-release"
          echo "üîê Using NPM OIDC authentication (no token required)"

          # Run semantic-release and capture outputs
          npx semantic-release > release-output.txt 2>&1
          EXIT_CODE=$?

          echo "Semantic-release exit code: $EXIT_CODE"
          echo "Semantic-release output:"
          cat release-output.txt

          # Set outputs for downstream jobs
          if [ $EXIT_CODE -eq 0 ]; then
            echo "new_release_published=true" >> "$GITHUB_OUTPUT"
            echo "Setting new_release_published=true"

            # Get the latest tag created by semantic-release
            git fetch --tags
            LATEST_TAG=$(git describe --tags --abbrev=0)
            VERSION=$(echo $LATEST_TAG | sed 's/^v//')  # Remove 'v' prefix if present

            echo "new_release_version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "new_release_git_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
            echo "Found release tag: $LATEST_TAG (version: $VERSION)"
          else
            echo "new_release_published=false" >> "$GITHUB_OUTPUT"
            echo "Setting new_release_published=false"
          fi

      - name: Commit changelog to release branch
        if: steps.release.outputs.new_release_published == 'true' && github.ref == 'refs/heads/release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.release.outputs.new_release_version }}"
          BRANCH_NAME="release"

          echo "üìù Committing changelog for v${VERSION} to ${BRANCH_NAME} branch..."

          # Check if CHANGELOG.md was created/updated
          if [ -f CHANGELOG.md ]; then
            # Get file content (base64 encoded)
            CONTENT=$(base64 -w 0 CHANGELOG.md)

            # Create conventional commit message
            COMMIT_MESSAGE="chore(release): update changelog for v${VERSION}"

            echo "Attempting to commit changelog to $BRANCH_NAME branch..."

            # Get the SHA of the existing file using git
            echo "Getting SHA for existing CHANGELOG.md on $BRANCH_NAME branch..."

            # Use git to get the file's SHA from the branch
            SHA=$(git rev-parse $BRANCH_NAME:CHANGELOG.md)

            echo "Found existing file SHA: $SHA"

            # Update the existing file with the new content using GitHub API
            gh api --method PUT repos/:owner/:repo/contents/CHANGELOG.md \
              --field message="$COMMIT_MESSAGE" \
              --field content="$CONTENT" \
              --field branch="$BRANCH_NAME" \
              --field sha="$SHA"

            echo "‚úÖ Updated CHANGELOG.md on ${BRANCH_NAME} branch via API (GPG signed)"
          else
            echo "‚ö†Ô∏è No CHANGELOG.md found to commit"
          fi

      - name: Create PR to merge changelog to main
        if: steps.release.outputs.new_release_published == 'true' && github.ref == 'refs/heads/release'
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          VERSION="${{ steps.release.outputs.new_release_version }}"

          echo "üìù Creating PR to merge changelog for v${VERSION} to main..."

          # Create PR using gh CLI with the PAT
          gh pr create \
            --base main \
            --head release \
            --title "chore(release): merge changelog for v${VERSION} to main" \
            --body "## üìù Changelog Update for v${VERSION}

          This PR merges the updated CHANGELOG.md from the stable release back to the main branch.

          ### What's included:
          - ‚úÖ Updated CHANGELOG.md with release notes for v${VERSION}
          - ‚úÖ No other changes - changelog only

          ### Release Details:
          - **Version**: v${VERSION}
          - **Release Branch**: release
          - **Release Type**: Stable Release

          This PR is automatically created after a successful stable release to ensure the main branch stays up-to-date with release history.

          ü§ñ Generated automatically by semantic-release workflow." \
            --label "changelog" \
            --label "automated" \
            --label "release" \
          && echo "‚úÖ PR created successfully" \
          || echo "‚ö†Ô∏è Failed to create PR - it may already exist"

  verify-publish:
    name: Verify Package Published
    needs: [publish]
    if: always() && needs.publish.outputs.release_created == 'true' && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Verify NPM Package
        run: |
          echo "‚úÖ Verifying package was published to npm registry..."
          echo "Package: @wormhole-labs/sui-ptb-resolver"
          echo "Version: ${{ needs.publish.outputs.version }}"
          echo "Tag: ${{ needs.publish.outputs.tag_name }}"
          echo ""

          sleep 30
          npm view @wormhole-labs/sui-ptb-resolver@${{ needs.publish.outputs.version }} version

          echo ""
          echo "‚úÖ Package successfully verified on npm registry"
